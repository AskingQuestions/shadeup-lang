[package]
name = "parser"
version = "0.1.0"
edition = "2021"

# [build-dependencies]
# lalrpop = "0.19.7"

[dependencies]
# lalrpop-util = { version = "0.19.7", features = ["lexer"] }
# regex = "1"
# logos = "0.12.1"
# colored = "2.0.0"
wasm-bindgen = { version = "0.2.63", optional = true }
serde = { version = "1.0", features = ["derive"] }
serde-wasm-bindgen = "0.4"
# logos-nom-bridge = "0.1.0"
# nom = "7.1.1"
chumsky = "0.8.0"
ariadne = "0.1.5"
multimap = "0.8.3"

[features]
wasm = ["wasm-bindgen"]

# [package.metadata.wasm-pack.profile.dev]
# # Should `wasm-opt` be used to further optimize the wasm binary generated after
# # the Rust compiler has finished? Using `wasm-opt` can often further decrease
# # binary size or do clever tricks that haven't made their way into LLVM yet.
# #
# # Configuration is set to `false` by default for the dev profile, but it can
# # be set to an array of strings which are explicit arguments to pass to
# # `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# # would execute very expensive optimizations passes
# wasm-opt = false

# [package.metadata.wasm-pack.profile.dev.wasm-bindgen]
# # Should we enable wasm-bindgen's debug assertions in its generated JS glue?
# debug-js-glue = true
# # Should wasm-bindgen demangle the symbols in the "name" custom section?
# demangle-name-section = true
# # Should we emit the DWARF debug info custom sections?
# dwarf-debug-info = false

# [package.metadata.wasm-pack.profile.profiling]
# wasm-opt = false

# [package.metadata.wasm-pack.profile.profiling.wasm-bindgen]
# debug-js-glue = false
# demangle-name-section = true
# dwarf-debug-info = false

# # `wasm-opt` is on by default in for the release profile, but it can be
# # disabled by setting it to `false`
# [package.metadata.wasm-pack.profile.release]
# wasm-opt = false

# [package.metadata.wasm-pack.profile.release.wasm-bindgen]
# debug-js-glue = false
# demangle-name-section = true
# dwarf-debug-info = false